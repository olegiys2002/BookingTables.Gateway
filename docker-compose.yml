version: '3.4'

services:
  bookingtables.gateway:
    image: ${DOCKER_REGISTRY-}bookingtablesgateway
    build:
      context: .
      dockerfile: BookingTables.Gateway/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    ports:
      - "5030:443"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro

  bookingtablesapi:
     image: bookingtablesapi
     build:
      context: ./../BookingTablesAPI/
      dockerfile: ./../BookingTablesAPI/BookingTables.API/Dockerfile
     environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
     ports:
      - "5050:80"
     depends_on:
      - cache
      - rabbitmq
      - identity
     links:
     - "cache"

     container_name: bookingtablesapi
 

  cache:
    image: redis:latest
    restart: always
    ports:
     - 6379:6379
    container_name: redis
  
  rabbitmq:
    image: rabbitmq:3-management
    ports:
     - 5672:5672
     - 15672:15672
    container_name: rabbit
    restart: always

  emailsender:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    build:
      context: ./../EmailSender/
      dockerfile: ./../EmailSender/EmailSender/Dockerfile
    depends_on:
     - rabbitmq
     - emailsender-db
    ports:
    - 5070:80
    container_name: emailsender


  identity:
    image: ${DOCKER_REGISTRY-}identity
    ports:
      - "5090:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    build:
      context: ./../Identity/
      dockerfile: ./../Identity/Identity/Dockerfile
    container_name: identity
    depends_on:
      - cache


  
  emailsender-db:
   image: mongo
   ports:
      - 27017:80
   container_name: mongo
   depends_on: 
   - rabbitmq
   volumes:
      - mongodata:/data/db


  booking-table-front:
   build:
    context: ./../BookingTablesFront/
    dockerfile: ./../BookingTablesFront/Dockerfile
   container_name: booking-table-front
   ports:
     - 80:80


  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.4.3
    ports:
     - 9200:9200
    volumes:
     - esdata:/usr/share/elasticsearch/data
    environment:
     - xpack.monitoring.templates.enabled=true
     - xpack.monitoring.templates.enabled=false
     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
     - discovery.type=single-node
     - xpack.security.enabled=false


  kibana:
    container_name: kibana
    image: kibana:8.4.3
    ports:
     - 5601:5601
    depends_on:
     - elasticsearch
    environment:
     - ELASTICSEARCH_URL=http://localhost:9200
  

  
volumes:
    esdata:
        driver: local 
    mongodata:
